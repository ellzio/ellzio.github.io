<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ellzio.github.io</id>
    <title>Ellzio&apos;s Blog</title>
    <updated>2020-03-11T08:30:35.882Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ellzio.github.io"/>
    <link rel="self" href="https://ellzio.github.io/atom.xml"/>
    <subtitle>随便写写 :-)</subtitle>
    <logo>https://ellzio.github.io/images/avatar.png</logo>
    <icon>https://ellzio.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ellzio&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Question List for Python(持续更新)]]></title>
        <id>https://ellzio.github.io/post/question-list-for-pythonchi-xu-geng-xin/</id>
        <link href="https://ellzio.github.io/post/question-list-for-pythonchi-xu-geng-xin/">
        </link>
        <updated>2020-03-10T09:17:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="question-list-for-python持续更新">Question List for Python(持续更新)</h3>
<ol>
<li>
<p>python print array时array中间是省略号没有输出全部的解决方法<br>
在开头加入</p>
<pre><code>import numpy as np
np.set_printoptions(threshold=np.inf)
</code></pre>
</li>
<li>
<p>python--- JsonPath从多层嵌套Json中解析所需要的值</p>
<pre><code>dic =   {
        &quot;error_code&quot;: 0,
        &quot;stu_info&quot;: [
                {
                        &quot;id&quot;: 2057,
                        &quot;name&quot;: &quot;xiaohei&quot;,
                        &quot;sex&quot;: &quot;nan&quot;,
                        &quot;age&quot;: 29,
                        &quot;addr&quot;: &quot;beijing&quot;,
                        &quot;grade&quot;: &quot;tianxie&quot;,
                        &quot;phone&quot;: &quot;18712321234&quot;,
                        &quot;gold&quot;: 100
                }
        ]
}
import jsonpath
s = jsonpath.jsonpath(dic,'$..name')   #不管有多少层，写两个.都能取到
print(s) #['xiaohei'] 返回的是一个列表
s = jsonpath.jsonpath(dic,'$..hehe')   #当不存在hehe这个key时，返回false
print(s)  #False
</code></pre>
<p>From: <a href="https://www.cnblogs.com/HathawayLee/p/10024560.html">https://www.cnblogs.com/HathawayLee/p/10024560.html</a></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter nbextensions安装]]></title>
        <id>https://ellzio.github.io/post/jupyter-nbextensions-cha-jian-an-zhuang/</id>
        <link href="https://ellzio.github.io/post/jupyter-nbextensions-cha-jian-an-zhuang/">
        </link>
        <updated>2020-03-10T09:06:52.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Conda</strong></p>
<pre><code>conda install -c conda-forge jupyter_contrib_nbextensions
</code></pre>
<p><strong>PIP</strong></p>
<pre><code>pip install jupyter_contrib_nbextensions
</code></pre>
<p>根据自己的习惯勾选<br>
<img src="https://ellzio.github.io/post-images/1583833087847.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflow图像分类器retrain过程]]></title>
        <id>https://ellzio.github.io/post/tensorflow-tu-xiang-fen-lei-qi-retrain-guo-cheng/</id>
        <link href="https://ellzio.github.io/post/tensorflow-tu-xiang-fen-lei-qi-retrain-guo-cheng/">
        </link>
        <updated>2020-03-10T08:07:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00-运行环境">0x00 运行环境</h2>
<p>首先安装anaconda和tensorflow_gpu环境, 网上有教程，不多赘述。装完之后好像tensorflow_gpu会在anaconda下创建一个虚拟环境。</p>
<p>然后将Tensorflow图像分类器项目克隆到本地，项目地址(<a href="https://github.com/akshaypai/tfClassifier">https://github.com/akshaypai/tfClassifier</a>)<br>
具体步骤，打开命令提示符，输入命令<br>
<code>git clone https://github.com/akshaypai/tfClassifier</code></p>
<p><img src="https://img-blog.csdnimg.cn/20190509212946586.png" alt="在这里插入图片描述" loading="lazy"><br>
<strong>注意</strong>：此时的路径就是你clone项目之后项目的保存路径，比如我的是在D盘。命令行下载可能会失败，也可以在项目主页上点击下载<br>
<img src="https://ellzio.github.io/post-images/1583829070536.png" alt="" loading="lazy"></p>
<p><strong>数据集</strong><br>
从网上找了一个数据集，地址 <a href="http://www.sykv.com/m/view.php?aid=15258">http://www.sykv.com/m/view.php?aid=15258</a><br>
<img src="https://ellzio.github.io/post-images/1583829112109.png" alt="" loading="lazy"><br>
<img src="https://ellzio.github.io/post-images/1583829559622.png" alt="" loading="lazy"><br>
有五种花，每种800张左右。<br>
<img src="https://img-blog.csdnimg.cn/20190509213244699.png" alt="在这里插入图片描述" loading="lazy"><br>
设置图像文件夹，新建一个父文件夹，名称为flowers，在该文件夹下新建5个子文件夹，分别对应五种花的名字，将五种花的图片放到对应的文件夹下，由于数据集提供者已经建好，这里只用改一下文件夹的名称即可</p>
<h2 id="0x01-训练过程">0x01 训练过程</h2>
<p>打开anaconda命令行<br>
<img src="https://img-blog.csdnimg.cn/20190509213331455.png" alt="在这里插入图片描述" loading="lazy"><br>
将环境切换到tensorflow_gpu下<br>
<img src="https://img-blog.csdnimg.cn/20190509213350897.png" alt="在这里插入图片描述" loading="lazy"><br>
将路径切换到GitHub项目下载的地方，存有retrain.py文件的路径下，该文件用来重新训练模型<br>
<img src="https://ellzio.github.io/post-images/1583829125858.png" alt="" loading="lazy"><br>
<img src="https://ellzio.github.io/post-images/1583829160104.png" alt="" loading="lazy"><br>
原始代码有部分是tensorflow 1.0时的函数，现在的tensorflow有所改动，具体为将retrain.py文件下第750行及其后一句中的tf.train.SummaryWriter改为tf.summary.FileWriter<br>
<img src="https://ellzio.github.io/post-images/1583829169477.png" alt="" loading="lazy"><br>
改完之后执行代码</p>
<pre><code>python retrain.py --model_dir D:\tfClassifier-master\image_classification\inception --image_dir F:\Download\flowers --output_graph D:\tfClassifier-master\image_classification\output.pb --output_labels D:\tfClassifier-master\image_classification\labels.txt --how_many_training_steps 500
</code></pre>
<p>这是我的路径，可以根据自己的路径修改<br>
<img src="https://ellzio.github.io/post-images/1583829180577.png" alt="" loading="lazy"><br>
上图只给了部分参数，实际上还有其他参数，注意output_graph和output_labels要具体到文件，否则会报错，具体参见( <a href="https://stackoverflow.com/questions/45076911/tensorflow-failed-to-create-a-newwriteablefile-when-retraining-inception">https://stackoverflow.com/questions/45076911/tensorflow-failed-to-create-a-newwriteablefile-when-retraining-inception</a> )，这个网址里也有关于预训练更多的参数</p>
<p>执行命令行<br>
<img src="https://ellzio.github.io/post-images/1583829187459.png" alt="" loading="lazy"><br>
首先会生成label文件，由于我没有指定路径<br>
<img src="https://img-blog.csdnimg.cn/20190509213844761.png" alt="在这里插入图片描述" loading="lazy"><br>
即这里面的battleneck路径，文件生成在D盘根目录下，分类器项目我放在D盘<br>
<img src="https://img-blog.csdnimg.cn/20190509213906483.png" alt="在这里插入图片描述" loading="lazy"><br>
建议这里还是指定一下battleneck的路径<br>
<img src="https://img-blog.csdnimg.cn/201905092140060.png" alt="在这里插入图片描述" loading="lazy"><br>
生成了tmp文件夹，其中bottleneck是五种花的标签（label）文件，下面是日志文件<br>
<img src="https://ellzio.github.io/post-images/1583829198813.png" alt="" loading="lazy"><br>
生成完之后开始训练，按照之前的设置迭代500次<br>
<img src="https://img-blog.csdnimg.cn/20190509214126403.png" alt="在这里插入图片描述" loading="lazy"><br>
最终准确率84.4%</p>
<h2 id="0x02-测试retrain的模型">0x02 测试retrain的模型</h2>
<p>具体命令为<br>
<img src="https://ellzio.github.io/post-images/1583829210401.png" alt="" loading="lazy"><br>
这里可以参考项目上给出的链接 <a href="https://sourcedexter.com/retrain-tensorflow-inception-model/">https://sourcedexter.com/retrain-tensorflow-inception-model/</a><br>
<img src="https://ellzio.github.io/post-images/1583829283553.png" alt="" loading="lazy"><br>
测试准确率为94.9%，搞定！</p>
<p><strong>参考</strong><br>
[1] <a href="https://zhuanlan.zhihu.com/p/28223165">https://zhuanlan.zhihu.com/p/28223165</a><br>
[2] <a href="https://suiwo.xyz/2017/11/08/TensorFlow%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%BC%95%E8%B5%B7%E7%9A%84%E9%94%99%E8%AF%AF/">https://suiwo.xyz/2017/11/08/TensorFlow不同版本引起的错误/</a><br>
[3] <a href="https://sourcedexter.com/retrain-tensorflow-inception-model/">https://sourcedexter.com/retrain-tensorflow-inception-model/</a><br>
[4] <a href="https://stackoverflow.com/questions/45076911/tensorflow-failed-to-create-a-newwriteablefile-when-retraining-inception">https://stackoverflow.com/questions/45076911/tensorflow-failed-to-create-a-newwriteablefile-when-retraining-inception</a></p>
]]></content>
    </entry>
</feed>